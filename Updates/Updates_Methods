https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM4080848

November 6th Update
Downloaded SRA toolkit from NCBI so that I could download the SRA data I needed. 

Code for download: wget "http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz"
  Code taken from the NCBI GitHub that explained how to download and run the SRA Toolkit
Following the download of the toolkit I then un-tarred the file as in order to use it I needed to
  Code:  tar -xzf sratoolkit.current-centos_linux64.tar.gz
  This un tarred the program so that I could use it. Again, these steps were take from NCBI GitHub explaining the process. 

Nov 7th Update

Once the porgram was un-tarred I could change into its bin directory and being downloading my SRA reads. 

WA_01 download code: ./prefetch SRR10125328 (This downloaded the first read.) Then due to having the downloaded file be in a different
directory the following code was used to move it
  cp WA_01.sra ~/scratch/topic_of_Choice/
  
Nov 9th Updates
Following the code listed in the Nov 7th update the following three reads were downloaded and moved into the new directory:
WA_02: ./prefetch SRR10125329
WA_03: ./prefetch SRR10125330

Following the succesful download of the WA reads, the .sra files then needed to be converted to .fasta/.fastq files. The following code was used
Due to me being unable to find code to convert .sra to .fastq the following code was used to re-download the SRA files for Withaferin-A reads
and the DMSO reads. 

Nov 11th, Update
Code for fasterq-dump
WA_01: ./fasterq-dump SRR10125328 -O ~/scratch/topic_of_Choice/Wilfarin_A/ (This code allowed me to download the SRA file as two .fastq files
that represented a froward read and a reverse read. It also put it into the Wilfarin_A directory)
WA_02: ./fasterq-dump SRR10125329 -O ~/scratch/topic_of_Choice/Wilfarin_A
WA_03: ./fasterq-dump SRR10125330 -O ~/scratch/topic_of_Choice/Wilfarin_A

Code for DMSO Fasterq-dump
D_01: ./fasterq-dump SRR10125325 -O ~/scratch/topic_of_Choice/DMSO
D_02: ./fasterq-dump SRR10125326 -O ~/scratch/topic_of_Choice/DMSO
D_03: ./fasterq-dump SRR10125327 -O ~/scratch/topic_of_Choice/DMSO

Nov 13th Updates
Downloaded the Human Genome and Transcriptome using the following commands
Reference Genome: wget http://ftp.ensembl.org/pub/release-86/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
Following the download I then needed to unpackage the compressed file using this line of code: gunzip file.gtf.gz
The resulting file was a .fna or technically a fasta file which could then be used to map the reads to. 

Transcriptome: Need to figure this out.

Referneces:https://www.gungorbudak.com/blog/2018/05/16/how-to-download-hg38-grch38-fasta-human-reference-genome/

November 16th Updates
RNASeq Pipline: Raw Reads -> QA/QC (fastqc and cuadapt) -> Mapping/alignment of reads with STAR -> transcript counting and assembly using RSEM ->
Generation of Count table and metadata for DESeq2 (obtaiend following assembly) -> DESeq2 for differential gene analysis -> Generation of graphs and charts to aid in
the showing of results.

Ran QA/QC for two reads W_01 and DMSO_1
Code for DMSO_1: fastqc DMSO_1_R1.fastq (for read 1) and fastqc DMSO_1_R2.fastq (for read 2)
Code for DMSO_2: fastqc DMSO_2_R1.fastq (for read 1) and fastqc DMSO_2_R2.fastq (for read 2)
Code for WA_1: fastq WA_1_R1.fastq (for read 1) and fastqc WA_1_R2.fastq (for read 2)
Code for WA_2: fastqc WA_2_R1.fastq (for read 1) and fastqc WA_2_R2.fastq (for read 2)

November 17th Update
Overall quality of reads seems good, only red "X" recived is on Sequence Duplicaiton Levels, otherwise no other issues with the reads. 
Reads are good following confirmation from Techtmann, primary reason is that there are so many reads and a lot of data. 

November 18th Update
Ran cutadapt with the following parameters on the fastqc files: cutadapt -q 20,20 -m 50 --max-n 0 -o  WA_1_R1.cutadapt.fastq -p WA_1_R2.cutadapt.fastq WA_1_R1.fastq WA_1_R2.fastq
Following cutadapt completion (0.2%) or 14,530,079 reads were cut. Due to this not having a strong impact on data, cutadapt was not
used for furthur runs. 
Also rechecked fastqc following cuadapt to see if there were any differences or if data actually needed to be cutadapted. 
Began work on presentation and paper: essentially got ppt and paper formatted with a litte data here and there.

November 22nd Update
Ran cutadapt for the remaining WA and DMSO reads using the same code as used on the 17th. Also added more to the paper and presentation. 
WA_2:cutadapt -q 20,20 -m 50 --max-n 0 -o  WA_2_R1.cutadapt.fastq -p WA_2_R2.cutadapt.fastq WA_2_R1.fastq WA_2_R2.fastq
DMSO 1: cutadapt -q 20,20 -m 50 --max-n 0 -o  DMSO_1_R1.cutadapt.fastq -p DMSO_1_R2.cutadapt.fastq DMSO_1_R1.fastq DMSO_1_R2.fastq
DMSO 2: cutadapt -q 20,20 -m 50 --max-n 0 -o  DMSO_2_R1.cutadapt.fastq -p DMSO_2_R2.cutadapt.fastq DMSO_2_R1.fastq DMSO_2_R2.fastq

After using cutadapt on the reads, while the overall amount of bases was small (.2%) some issues were aliveated. 

Also generated the genome index for use with STAR. Code shown below
gunzip Homo_sapiens.GRCh38.86.gtf.gz
gunzip Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz

Code for index: STAR --runMode genomeGenerate --genomeDir star_data --genomeFastaFiles Homo_sapiens.GRCh38.dna.primary_assembly.fa --sjdbGTFfile Homo_sapiens.GRCh38.86.gt

Following this RSEM will be run and RStudio will be used for final analysis. Will need to being on paper and presentaiton.

November 24th Update
Began adding to paper and presentation. Knocked out part of "Backgroung/Into" and part of methods. Will need to add more as the week progresses
and will need to run the reads through STAR and RSEM. 

It was noted that when trying to begin the making of the reference with STAR that there was a FATAL error in opening one of the files
this occured because one of the files was entered incorrectly. Rerunning the program will hopefully alleviate the issue and then
the process can continue. (Line said to assemble with .gt not .gtf. If FATAL error occurs again will look to rerun)

The following code was rerun : STAR --runMode genomeGenerate --genomeDir star_data --genomeFastaFiles Homo_sapiens.GRCh38.dna.primary_assembly.fa --sjdbGTFfile Homo_sapiens.GRCh38.86.gtf
Code ran well with no errors. Following the successful run the DMSO reads were then run through STAR for mapping and alignment. 

DMSO1: STAR --genomeDir star --readFilesIn DMSO_1_R1.cutadapt.fastq DMSO_1_R2.cutadapt.fastq --outSAMtype BAM SortedByCoordinate --outSAMunmapped Within --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM --outFileNamePrefix "DMSO1"
(Remember that /fastq files need to be  in the same foler as you are running STAR)
(FATAL ERROR: need to increase Disk space or ulimit -n? Waiting to hear back before continuing.)

DMSO2: STAR --genomeDir star --readFilesIn DMSO_2_R1.cutadapt.fastq DMSO_2_R2.cutadapt.fastq --outSAMtype BAM SortedByCoordinate --outSAMunmapped Within --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM --outFileNamePrefix "DMSO2"

WA1: STAR --genomeDir star --readFilesIn WA_1_R1.cutadapt.fastq WA_1_R2.cutadapt.fastq --outSAMtype BAM SortedByCoordinate --outSAMunmapped Within --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM --outFileNamePrefix "WA1"

WA2: STAR --genomeDir star --readFilesIn WA_2_R1.cutadapt.fastq WA_2_R2.cutadapt.fastq --outSAMtype BAM SortedByCoordinate --outSAMunmapped Within --twopassMode Basic --outFilterMultimapNmax 1 --quantMode TranscriptomeSAM --outFileNamePrefix "WA2"

November 26th Update
STAR Ran successfully on Dr. Techtmanns server, above code still applies. Will be running the remaining DMSO reads and starting WA reads
today. Hopefully RSEM later today or tomorrow so that RStudio Analysis can begin. 
Began RSEM by first making a reference for it to use.

Code for reference transriptome: rsem-prepare-reference --gtf Homo_sapiens.GRCh38.86.gtf Homo_sapiens.GRCh38.dna.primary_assembly.fa RSEM/GRCh38
Following the preparation of the reference, the reads obtained from STAR could then be mapped to count transcripts. The following code
was used for the DMSO reads.

DMSO1: rsem-calculate-expression --bam --no-bam-output --paired-end --forward-prob 0 DMSO1Aligned.toTranscriptome.out.bam rsem/GRCh38 out >& rsem1.log

DMSO2: rsem-calculate-expression --bam --no-bam-output --paired-end --forward-prob 0 DMSO2Aligned.toTranscriptome.out.bam rsem/GRCh38 out >& rsem2.log

Nov 27th Updates
Remade the reference for RSEM. Doing so seemed to aliviate the problem, however nothing appears when RSEM is running. Above code still works though. 
After stopping rsem after ~5 min (29000000 entries parsed) After ~1 hour or so (Working well, DO NOT STOP PROGRAM NOW!)

Transcript counting successfull, now just need to see what I can do with the .results files. Will look to make them into tables
or .csv for input into RStudio. Also in order to get rsem data into RStudio to use DESeq2 we needed to install "tximport" and "tximeta" into RStudio
The following code was used: if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("tximport")

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("tximeta")

Code for Withgaferin A rsem

WA1: rsem-calculate-expression --bam --no-bam-output --paired-end --forward-prob 0 WA1Aligned.toTranscriptome.out.bam rsem/GRCh38 out >& rsem3.log
WA2: rsem-calculate-expression --bam --no-bam-output --paired-end --forward-prob 0 WA2Aligned.toTranscriptome.out.bam rsem/GRCh38 out >& rsem4.log

Once all runs were completed the data was downloaded from the server so that it could be imported into R using "tximport" or "tximeta".
Once imported the final steps (DESEq2) and analysis could occur!

November 28th Updates
To make generation of tables easier for comparision the following code was used to bring the data from each of the four out.genes.results
files and make a single table or comparison in R. 

rsem-generate-data-matrix DMSO1.ou.genes.results DMSO2.out.genes.results WA1.out.genes.results WA2.out.genes.results > DMSOvWA.counts.matrix

This code essentally allowed for the generation of a table that compares the expected of each gene from each RSEM results file. This then allows us
to compare these genes in differental gene analysis using DESeq2 in RStudio. In addtion each .results file was brought into R manually
using the Import Dataset function in RStudio. 

Code from RStudio is below:

#Topic of Choice Code for R

#First needed to install packages such as tidyverse, readr, and DESEq2
install.packages("readr")
install.packages("tidyverse")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager") 
BiocManager::install("DESeq2")
#For help bringing in RSEM transcript data need "tximport" Use following code
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("tximport")
#tximport will generate a list that can then be used with DESeq2. 
#Also install "tximeta" for metadata etc. 
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("tximeta")

# BC unable to use the above programs with RSEM data, manual importaiton was required.
# Removed transcript IDs from each dataset to make cleaner using the following code structure (one set of IDs was kept for comparison table)
DMSO1res$transcript_id.s. <- NULL

#Following this structure trranscript IDs were removed from all dataset files. 
#Next a larger counts table needed to be generated that compared all of the values from each run. The following code was used. 

#Attempted to import files using tximport using following code:
txi.rsem <- tximport(files, type = ("rsem"), txIn = FALSE, txOut = FALSE)
#This worked successfully. Generated a file called txi.rsem will a large data list and a "counts" table that contained
#expected length data that could be used for DESeq2. 
#After generation, when trying to make the dds file, all (lengths > 0) is not TRUE came up. To aleviate this issue
# ran the following code before making it a dds file with.
txi.rsem$length[txi.rsem$length == 0] <- 1

#This essentially allowed for ther dds to be generated using the following code:
dds <- DESeqDataSetFromTximport(txi.rsem,Table, ~condition)
#This then allowed the dds to be used with DESeq2. The generation of 0 -> 1 only changed those lengths that were 0
#or genes that were not affected to 1. 

#DESeq data was run with the following code
#First open all needed libraries
library(readr)
library(tidyverse)
library(DESeq2)
#After opening the library then could run DESeq2:
ddss <- DESeq(dds)
res <- results(ddss, tidy=TRUE)
#This code ran the DESeq program and put the "results" into the file called ddss
#The results were then pulled from this file and put into a new file called res
#Another file was then generated called res2. This was generated using the following code and put the genes in order of
#their adjusted p-value. 
res2 <- arrange(res,padj)
#From here two more files were generated in order to compare the DMSO control to the Withaferin A results. 
#The following code generated two new results files based upon the significantly different genes
res3 <- filter(res2, padj<=0.05 & log2FoldChange>=2)
res4 <- filter(res2, padj<=0.05 & log2FoldChange<=-2)
#res3 contained those genes that were significantly different in the treatment (WA) compared to the control (DMSO)
#This means that those genes are upregulated in the treatment
#res4 contained those genes that were significantly different in the control (DMSO) compared to the treatment (WA)
#This means that these genes are downregulated. 

#However, we also wanted the total number of genes downregulated and uppregulated for comparison to the orignal study
#The following code allowed us tto do so. 
res5 <- filter(res2, padj<=0.05 & log2FoldChange > 0)
res6 <- filter(res2, padj<=0.05 & log2FoldChange < 0)
#This should give a more accurate representaiton of how many genes in total were upregulated or downregulated, 
#Although it might not convey significance like res3 and res4 do. 

#It is good to note that the numbers obtained through this method are much lower than in the original
#Upregulated orignal (6993) vs Upregulated by me (478 or 830)
#Downregulated oringial (6607) vs Downregulated by me (389 or 648)

Why these numbers are overall lower than the orignal could be explained by a multitude of answers such as:
1. The usage of a more updated Human Genome
2. RSEM or STAR not working correctly 
3. The usage of different programs (I used STAR and RSEM, while the original used HTSeq and edgeR in additon to DESeq2)
4. Not using the correct code to display the data. (Will try messing with this more).

#Will try to manipulate data more to see if anything else can be seen as it is a 58051 obs file.
#Following code was used in order to get the total (including non-significat) data for upregulation and downregulation
#within the treatment (WA) cell genome.
res7 <- filter(res2, log2FoldChange >0) #This was for upregulated genes: total 9518
res8 <- filter(res2, log2FoldChange <0) #This was for downregulated genes: total 15166

#To make it easier to see control vs treatment added this line to res2
res2 = mutate(res2, Regulation=ifelse(log2FoldChange>0,"Upregulated in Treatment","Downregulated in Treatment"))

#Finally able to make plots for the data. 
#Code for Volcano plot of res2 or the "Oringinal Results"
volcano1 <- ggplot(res2) +
  geom_point(aes(x=log2FoldChange, y=-log10(padj), colour = Regulation))+
  ggtitle("Upregulated and Downregulated Genes in Treated Cells")+
  xlab("Log2FoldChange")+
  ylab("-long10 Adjusted P-value")+
  #scale_y_continuous(limits=c(0.50))+
  theme(legend.position= "none", plot.title = element_text(size=rel(1.5), hjust = 0.5), axis.title = element_text(size =rel(1.25)))+
  theme_bw()
plot(volcano1)

#Some of the rows were deleted as they did not contain any values, which is ok. 
#Here is the code to show the Significantly Differentially Expressed genes. This was done by merging the results found in res3 and res4.
resUp<- res3
resDown <-res4
resGenes <- rbind(resUp,resDown)
resGenes=mutate(resGenes, Regulation=ifelse(log2FoldChange>0,"Upregulated in Treatment","Downregulated in Treatment"))

Vol2 <- ggplot(resGenes)+
  geom_point(aes(x=log2FoldChange, y=-log10(padj), color=Regulation))+
  ggtitle("Significant Genes")+
  xlab("Log2FoldChange")+
  ylab("-log10 Adjusted P-value")+
  #scale_y_continuous(limmits=c(0,50))+
  theme(legend.position= "none", plot.title = element_text(size=rel(1.5), hjust = 0.5), axis.title = element_text(size =rel(1.25)))+
  theme_bw()
plot(Vol2)

#Box plots for the three most highly upregulated and downregulated of the significant genes. These are taken from res3 and res4. 
#Those genes for Upregulation are : ENSG00000173110, ENSG00000015592, and ENSG00000146592
#The genes for Downregulation are: ENSG00000074966, ENSG00000272921, ENSG00000253633
#Code for Boxplots: Upregulation
#Upreg1:
plotCounts(dds, gene="ENSG00000173110", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000173110")
#Upreg 2:
plotCounts(dds, gene="ENSG00000015592", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000015592")
#Upreg 3:
plotCounts(dds, gene="ENSG00000146592", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000146592")

#For Downregulated genes
#Down1:
plotCounts(dds, gene="ENSG00000074966", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000074966")
#Down2
plotCounts(dds, gene="ENSG00000272921", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000272921")
#Down3
plotCounts(dds, gene="ENSG00000253633", intgroup="condition", returnData=TRUE) %>%
  ggplot(aes(condition,count))+
  geom_boxplot(aes(fill=condition))+
  scale_y_log10() + 
  ggtitle("ENSG00000253633")
#Following the generation of these plots the project was then complete. All that needed to be done was to insert these into 
#The presentation and the paper.






